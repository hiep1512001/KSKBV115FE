import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import * as actions from './../actions/index'
import NamService from '../services/namServices';
import KhamSucKhoeService from '../services/khamSucKhoeService';
import PieChartBase from './BieuDoTron';
import { CHART_COLORS, DMBENH } from './../constant/index'
import BieuDoCotBase from './BieuDoCot';

const Dashboard = (props) => {
    const [yearChose, setYearChose] = useState(null)
    const [countByNam, setCountByNam] = useState(null)
    const [dataBieuLoaiSK, setDataBieuLoaiSK] = useState(null);
    const [dataSoBenh, setDataSoBenh] = useState(null)
    const [tongChiSoBatThuong, setTongChiSoBatThuong] = useState(0)

    useEffect(() => {
        fetchData()
    }, []);

    useEffect(() => {
        if (yearChose) { // üëà Ch·ªâ ch·∫°y khi c√≥ nƒÉm ƒë∆∞·ª£c ch·ªçn
            fetchDataCount();
            fetchDataCountLoaiBenh();
        }
    }, [yearChose])

    // === Helper: Map d·ªØ li·ªáu lo·∫°i s·ª©c kh·ªèe ===
    const mapHealthData = (result) => ([
        { name: "Lo·∫°i I - ƒê·ªß s·ª©c kh·ªèe", value: result?.countLoaiI ?? 0 },
        { name: "Lo·∫°i II - ƒê·ªß s·ª©c kh·ªèe", value: result?.countLoaiII ?? 0 },
        { name: "Lo·∫°i III - ƒê·ªß s·ª©c kh·ªèe", value: result?.countLoaiIII ?? 0 },
        { name: "Lo·∫°i IV - Kh√¥ng ƒë·ªß s·ª©c kh·ªèe", value: result?.countLoaiIV ?? 0 },
    ])

    const fetchData = async () => {
        if (props.nams.length === 0) {
            try {
                const data = await NamService.getAll();
                data.sort((a, b) => b.tenNam - a.tenNam);
                props.onSetNams(data);
                // ‚úÖ Ch·ªâ set n·∫øu c√≥ √≠t nh·∫•t 1 ph·∫ßn t·ª≠
                if (data.length > 0) setYearChose(data[0]); // üëà C·∫≠p nh·∫≠t tr·ª±c ti·∫øp ·ªü ƒë√¢y
            } catch (error) {
                console.error('L·ªói l·∫•y danh s√°ch nƒÉm:', error);
            }
        } else {
            // props.nams ƒë√£ c√≥ s·∫µn
            if (props.nams.length > 0) setYearChose(props.nams[0]);
        }
    };

    const fetchDataCount = async () => {
        try {
            const result = await KhamSucKhoeService.countByNam(yearChose.maNam);
            setCountByNam(result)
            const value = mapHealthData(result);
            setDataBieuLoaiSK(value)
        } catch (error) {
            console.error("L·ªói t√¨m ki·∫øm:", error);
        }
    }

    const fetchDataCountLoaiBenh = async () => {
        try {
            const result = await KhamSucKhoeService.getLoaiBenh(yearChose.maNam);
            const data = DMBENH.map(item => ({
                name: item.ten,
                value: result[item.ma] ?? 0
            }));
            setDataSoBenh(data);
            // ‚úÖ S·ª≠a l·ªói: set ƒë√∫ng gi√° tr·ªã t·ªïng
            const tongValue = data.reduce((sum, item) => sum + item.value, 0);
            setTongChiSoBatThuong(tongValue)
        } catch (error) {
            console.error("L·ªói t√¨m ki·∫øm:", error);
        }
    }

    // Gom m·∫£ng card ƒë·ªÉ render g·ªçn
    const cards = [
        { icon: 'üë®‚Äç‚öïÔ∏è', label: 'T·ªïng ng∆∞·ªùi ƒë∆∞·ª£c kh√°m', value: countByNam ? countByNam.countSoBenh : "" },
        { icon: '‚úÖ', label: 'S·ª©c kh·ªèe lo·∫°i I', value: countByNam ? countByNam.countLoaiI : "" },
        { icon: '‚ö†Ô∏è', label: 'C·∫ßn theo d√µi', value: countByNam ? countByNam.countLoaiIV : "" },
        { icon: 'üìä', label: 'Ch·ªâ s·ªë b·∫•t th∆∞·ªùng', value: tongChiSoBatThuong },
    ];

    return (
        <div className="container py-4">
            <div className="d-flex justify-content-between align-items-center mb-4">
                <h2 className="mb-0 fw-bold text-primary">
                    üè• B√°o c√°o t·ªïng h·ª£p kh√°m s·ª©c kh·ªèe nƒÉm {yearChose != null ? yearChose.tenNam : ""}
                </h2>

            </div>

            {/* Cards Section */}
            <div className="row g-4 mb-4">
                {cards.map((item, idx) => (
                    <div className="col-12 col-sm-6 col-lg-3" key={idx}>
                        <div className="card shadow-sm border-0 bg-light h-100">
                            <div className="card-body">
                                <div className="d-flex align-items-center">
                                    <div className="me-3 fs-2 text-primary">{item.icon}</div>
                                    <div>
                                        <div className="fw-bold text-muted">{item.label}</div>
                                        <h4 className="mb-0 text-dark">{item.value ?? ""}</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Charts Section */}
            <div className="row g-4">
                <div className='col-12'>
                    <div className="card shadow-sm border-0">
                        <div className="card-body">
                            <h5 className="card-title text-secondary mb-3">
                                üìà Bi·ªÉu ƒë·ªì c·ªôt c√°c lo·∫°i b·ªánh
                            </h5>
                            {dataSoBenh ? (
                                <BieuDoCotBase
                                    data={dataSoBenh}
                                    colors={CHART_COLORS}
                                    title="Bi·ªÉu ƒë·ªì c·ªôt c√°c lo·∫°i b·ªánh"
                                />
                            ) : (
                                <div className="text-muted small fst-italic">ƒêang t·∫£i bi·ªÉu ƒë·ªì...</div>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            <div className="row g-4 mt-2">
                {/* Bi·ªÉu ƒë·ªì c·ªôt lo·∫°i s·ª©c kh·ªèe */}
                <div className="col-12 col-lg-6">
                    <div className="card shadow-sm border-0 h-100 bg-light-subtle">
                        <div className="card-body">
                            <h5 className="card-title text-secondary fw-semibold mb-3 d-flex align-items-center">
                                <span className="me-2 fs-5">üìã</span>
                                Bi·ªÉu ƒë·ªì c·ªôt lo·∫°i s·ª©c kh·ªèe
                            </h5>

                            {dataBieuLoaiSK ? (
                                <BieuDoCotBase
                                    data={dataBieuLoaiSK}
                                    colors={CHART_COLORS}
                                    title="Bi·ªÉu ƒë·ªì c·ªôt lo·∫°i s·ª©c kh·ªèe"
                                />
                            ) : (
                                <div className="text-muted small fst-italic">ƒêang t·∫£i bi·ªÉu ƒë·ªì...</div>
                            )}
                        </div>
                    </div>
                </div>

                {/* Bi·ªÉu ƒë·ªì tr√≤n lo·∫°i s·ª©c kh·ªèe */}
                <div className="col-12 col-lg-6">
                    <div className="card shadow-sm border-0 h-100 bg-light-subtle">
                        <div className="card-body">
                            <h5 className="card-title text-secondary fw-semibold mb-3 d-flex align-items-center">
                                <span className="me-2 fs-5">üß¨</span>
                                Bi·ªÉu ƒë·ªì tr√≤n lo·∫°i s·ª©c kh·ªèe
                            </h5>
                            {dataBieuLoaiSK ? (
                                <PieChartBase
                                    data={dataBieuLoaiSK}
                                    colors={CHART_COLORS}
                                    title="Lo·∫°i s·ª©c kh·ªèe"
                                    height={300}            // ch·ªânh t√πy card (300..380)
                                    innerRadius="38%"
                                    outerRadius="62%"
                                />
                            ) : (
                                <div className="text-muted small">Ch∆∞a c√≥ d·ªØ li·ªáu</div>
                            )}
                        </div>
                    </div>
                </div>
            </div>

        </div>
    );
};
const mapStateToProp = (state) => {
    return {
        nams: state.taskNam
    };
};
const mapDispatchToProps = (dispatch, props) => {
    return {
        onSetNams: (nams) => {
            dispatch(actions.setNam(nams));
        },
    };
};
export default connect(mapStateToProp, mapDispatchToProps)(Dashboard);
